"use strict";(self.webpackChunkflutter_sdk_docs=self.webpackChunkflutter_sdk_docs||[]).push([[571],{8215:function(e,a,n){var t=n(7294);a.Z=function(e){var a=e.children,n=e.hidden,l=e.className;return t.createElement("div",{role:"tabpanel",hidden:n,className:l},a)}},9877:function(e,a,n){n.d(a,{Z:function(){return d}});var t=n(7462),l=n(7294),i=n(2389),o=n(9548),r=n(6010),s="tabItem_LplD";function m(e){var a,n,i,m=e.lazy,d=e.block,c=e.defaultValue,u=e.values,p=e.groupId,k=e.className,h=l.Children.map(e.children,(function(e){if((0,l.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=u?u:h.map((function(e){var a=e.props;return{value:a.value,label:a.label,attributes:a.attributes}})),v=(0,o.lx)(g,(function(e,a){return e.value===a.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===c?c:null!=(a=null!=c?c:null==(n=h.find((function(e){return e.props.default})))?void 0:n.props.value)?a:null==(i=h[0])?void 0:i.props.value;if(null!==b&&!g.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var f=(0,o.UB)(),y=f.tabGroupChoices,S=f.setTabGroupChoices,T=(0,l.useState)(b),N=T[0],K=T[1],w=[],R=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=p){var x=y[p];null!=x&&x!==N&&g.some((function(e){return e.value===x}))&&K(x)}var D=function(e){var a=e.currentTarget,n=w.indexOf(a),t=g[n].value;t!==N&&(R(a),K(t),null!=p&&S(p,t))},C=function(e){var a,n=null;switch(e.key){case"ArrowRight":var t=w.indexOf(e.currentTarget)+1;n=w[t]||w[0];break;case"ArrowLeft":var l=w.indexOf(e.currentTarget)-1;n=w[l]||w[w.length-1]}null==(a=n)||a.focus()};return l.createElement("div",{className:"tabs-container"},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":d},k)},g.map((function(e){var a=e.value,n=e.label,i=e.attributes;return l.createElement("li",(0,t.Z)({role:"tab",tabIndex:N===a?0:-1,"aria-selected":N===a,key:a,ref:function(e){return w.push(e)},onKeyDown:C,onFocus:D,onClick:D},i,{className:(0,r.Z)("tabs__item",s,null==i?void 0:i.className,{"tabs__item--active":N===a})}),null!=n?n:a)}))),m?(0,l.cloneElement)(h.filter((function(e){return e.props.value===N}))[0],{className:"margin-vert--md"}):l.createElement("div",{className:"margin-vert--md"},h.map((function(e,a){return(0,l.cloneElement)(e,{key:a,hidden:e.props.value!==N})}))))}function d(e){var a=(0,i.Z)();return l.createElement(m,(0,t.Z)({key:String(a)},e))}},9254:function(e,a,n){n.r(a),n.d(a,{contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return k}});var t=n(7462),l=n(3366),i=(n(7294),n(3905)),o=n(9877),r=n(8215),s=n(1736),m=n(1128),d=["components"],c={title:"Migrate from Java SDK to Kotlin SDK"},u=void 0,p={unversionedId:"sdk/kotlin/migrate-from-java-sdk",id:"sdk/kotlin/migrate-from-java-sdk",title:"Migrate from Java SDK to Kotlin SDK",description:"The Kotlin SDK is a new Realm client SDK built entirely with the",source:"@site/docs/sdk/kotlin/migrate-from-java-sdk.mdx",sourceDirName:"sdk/kotlin",slug:"/sdk/kotlin/migrate-from-java-sdk",permalink:"/docusaurus-realm/sdk/kotlin/migrate-from-java-sdk",tags:[],version:"current",frontMatter:{title:"Migrate from Java SDK to Kotlin SDK"},sidebar:"kotlin",previous:{title:"Authenticate Users",permalink:"/docusaurus-realm/sdk/kotlin/app-services/authenticate-users"}},k=[{value:"Overview",id:"overview",children:[],level:2},{value:"Kotlin SDK Architecture",id:"kotlin-sdk-architecture",children:[],level:2},{value:"Opening Realms",id:"opening-realms",children:[],level:2},{value:"Realm Object Models",id:"realm-object-models",children:[],level:2},{value:"Relationships",id:"relationships",children:[{value:"One-to-One",id:"one-to-one",children:[],level:3},{value:"One-to-Many",id:"one-to-many",children:[],level:3}],level:2},{value:"Schema Types",id:"schema-types",children:[],level:2},{value:"Writes",id:"writes",children:[{value:"Async",id:"async",children:[],level:3},{value:"Sync",id:"sync",children:[],level:3}],level:2},{value:"Queries",id:"queries",children:[{value:"Filters",id:"filters",children:[],level:3}],level:2},{value:"Sort, Distinct, Limit",id:"sort-distinct-limit",children:[],level:2},{value:"Deletes",id:"deletes",children:[],level:2},{value:"Notifications",id:"notifications",children:[],level:2},{value:"Threading",id:"threading",children:[],level:2},{value:"Migrations",id:"migrations",children:[],level:2},{value:"What Next?",id:"what-next",children:[],level:2}],h={toc:k};function g(e){var a=e.components,n=(0,l.Z)(e,d);return(0,i.kt)("wrapper",(0,t.Z)({},h,n,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"What is the Kotlin SDK?")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The Kotlin SDK is a new Realm client SDK built entirely with the\nKotlin programming language. The Kotlin SDK uses an entirely\ndifferent codebase from the Java SDK. It is designed specifically\nto take advantage of Kotlin language features such as coroutines and\nsuspend functions. The Java SDK also supports some of these features,\nas well as Android applications written in Kotlin. But the\n",(0,i.kt)("a",{parentName:"p",href:"./intro"},"Kotlin SDK")," is more Kotlin-idiomatic than the\nJava SDK."))),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"The Java SDK and the Kotlin SDK differ in many ways. On this page, you'll\nfind a high-level comparison of most of the ways the SDKs differ."),(0,i.kt)("h2",{id:"kotlin-sdk-architecture"},"Kotlin SDK Architecture"),(0,i.kt)("p",null,"The Java SDK provided live objects, queries, and realms that\nautomatically update when underlying data changes. The Kotlin SDK still\nprovides this live interface in write transactions, but otherwise relies\non a new frozen architecture that makes Realm objects easier to work\nwith. Here are some of the main differences between the Java SDK\narchitecture and the Kotlin SDK architecture:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Frozen by default"),": All objects are now frozen. Unlike live objects,\nfrozen objects do not automatically update after database writes. You\ncan still access live objects within a write transaction, but passing\na live object out of a write transaction freezes the object.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Thread-safety"),": All realm instances, objects, query results, and\ncollections can now be transferred across threads.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Singleton"),": You now only need one instance of each realm.\n",(0,i.kt)("a",{parentName:"p",href:"/sdk/kotlin/realm-database/frozen-architecture"},"No need to open and close realms on individual threads.")))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"See Also")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("a",{parentName:"p",href:"/sdk/kotlin/realm-database/frozen-architecture"},"Kotlin SDK Frozen Architecture")))),(0,i.kt)("h2",{id:"opening-realms"},"Opening Realms"),(0,i.kt)("p",null,"The Java SDK automatically detects Realm Object Models defined in your\napplication, and uses all of them in the schema of opened realms unless\nyou specify otherwise. The Kotlin SDK requires you to manually specify\nthe Realm Object Models to use in your realm schema. Additionally:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The Kotlin SDK does not provide the ability to set and access a\ndefault realm in your application. Since you can now share realms,\nobjects, and results across threads, you can rely on a global singleton\ninstead.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The Java SDK used ",(0,i.kt)("inlineCode",{parentName:"p"},"RealmConfiguration.Builder().build()")," to\ngenerate instances of ",(0,i.kt)("inlineCode",{parentName:"p"},"RealmConfiguration"),". With the Kotlin SDK,\nuse the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm/-realm-configuration/-companion/with.html"},(0,i.kt)("inlineCode",{parentName:"a"},"RealmConfiguration.with()")),"\ncompanion method ",(0,i.kt)("inlineCode",{parentName:"p"},"RealmConfiguration")," instead.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The Java SDK used the static ",(0,i.kt)("inlineCode",{parentName:"p"},"Realm.getInstance()")," method to\nopen a realm with a given config. With the Kotlin SDK, use the static\n",(0,i.kt)("inlineCode",{parentName:"p"},"Realm.open()")," method instead."))),(0,i.kt)("table",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"java-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Java SDK (Kotlin)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},'val config = RealmConfiguration.Builder()\n    .build()\nvar realm: Realm\nrealm = Realm.getInstance(config)\nLog.v(\n    "EXAMPLE",\n    "Successfully opened a realm: "\n            + realm.path\n)\n')),(0,i.kt)(r.Z,{value:"java",label:"Java SDK (Java)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"java",mdxType:"CodeBlock"},'RealmConfiguration config =\n        new RealmConfiguration.Builder()\n        .build();\n\nRealm realm;\nrealm = Realm.getInstance(config);\nLog.v("EXAMPLE",\n"Successfully opened a realm: "\n        + realm.getPath());\n')))),(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"kotlin-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin SDK",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},'val config = RealmConfiguration\n    .with(schema = setOf(Frog::class,\n        Sample::class))\nval realm = Realm.open(config)\nLog.v("Successfully opened realm:" +\n        "${realm.configuration.name}")\n')))))),(0,i.kt)("p",null,"Optionally, use ",(0,i.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm/-realm-configuration/-builder/index.html"},(0,i.kt)("inlineCode",{parentName:"a"},"RealmConfiguration.Builder")),"\nto customize your configuration even more:"),(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},'val config = RealmConfiguration.Builder()\n    .schema(setOf(Frog::class, Sample::class))\n    .name(REALM_NAME)\n    .deleteRealmIfMigrationNeeded()\n    .path(PATH)\n    .encryptionKey(KEY)\n    .build()\nval realm = Realm.open(config)\nLog.v("Successfully opened realm: ${realm.configuration.name}")\n'),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"See Also")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("a",{parentName:"p",href:"/sdk/kotlin/realm-database/open-and-close-a-realm"},"Open & Close a Realm (Kotlin SDK)")))),(0,i.kt)("h2",{id:"realm-object-models"},"Realm Object Models"),(0,i.kt)("p",null,"In the Java SDK, you declare Realm object models in one of two ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"extending ",(0,i.kt)("inlineCode",{parentName:"p"},"RealmObject"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"implementing ",(0,i.kt)("inlineCode",{parentName:"p"},"RealmModel")))),(0,i.kt)("p",null,"The Kotlin SDK uses default methods in the ",(0,i.kt)("inlineCode",{parentName:"p"},"RealmObject")," interface\ninstead. With the Kotlin SDK, inherit from ",(0,i.kt)("inlineCode",{parentName:"p"},"RealmObject")," to\ndeclare a Realm object model. Annotations work the same way they did\nin java for fields with special properties, such as ignored fields,\nprimary keys, and indexes."),(0,i.kt)("table",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"java-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Java SDK (Kotlin)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},'open class Sample : RealmObject() {\n    @PrimaryKey\n    var stringField = "Realm"\n    var byteField: Byte = 0xA\n    // no support for chars: no charField\n    var shortField: Short = 17\n    var intField = 42\n    @Index\n    var longField = 256L\n    var booleanField = true\n    var floatField = 3.14f\n    var doubleField = 1.19840122\n    var timestampField = Date()\n}\n')),(0,i.kt)(r.Z,{value:"java",label:"Java SDK (Java)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"java",mdxType:"CodeBlock"},'public class Sample extends RealmObject {\n    @PrimaryKey\n    public String stringField = "Realm";\n    public Byte byteField = 0xA;\n    // no support for chars: no charField\n    public Short shortField = 17;\n    public Integer intField = 42;\n    @Index\n    public Long longField = 256L;\n    public Boolean booleanField = true;\n    public Float floatField = 3.14f;\n    public Double doubleField =\n            1.19840122;\n    public Date timestampField =\n            new Date();\n}\n')))),(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"kotlin-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin SDK",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},"class Sample : RealmObject {\n    @PrimaryKey\n    var stringField: String = \"Realm\"\n    var byteField: Byte = 0xA\n    var charField: Char = 'a'\n    var shortField: Short = 17\n    var intField: Int = 42\n    @Index\n    var longField: Long = 256L\n    var booleanField: Boolean = true\n    var floatField: Float = 3.14f\n    var doubleField: Double = 1.19840122\n    var timestampField: RealmInstant =\n        RealmInstant.fromEpochSeconds(\n            100,\n            1000)\n}\n")))))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"See Also")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("a",{parentName:"p",href:"/sdk/kotlin/realm-database/schemas/supported-types"},"Supported Schema Types (Kotlin SDK)")))),(0,i.kt)("h2",{id:"relationships"},"Relationships"),(0,i.kt)("p",null,"Both the Java and Kotlin SDKs declare relationships through Realm object\nfields:"),(0,i.kt)("h3",{id:"one-to-one"},"One-to-One"),(0,i.kt)("table",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"java-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Java SDK (Kotlin)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},"open class Child : RealmObject() {\n    var frog: Frog? = null\n}\n")),(0,i.kt)(r.Z,{value:"java",label:"Java SDK (Java)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"java",mdxType:"CodeBlock"},"public class Child\n        extends RealmObject {\n    public Frog frog = null;\n}\n")))),(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"kotlin-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin SDK",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},"class Child : RealmObject {\n    var frog: Frog? = null\n}\n")))))),(0,i.kt)("h3",{id:"one-to-many"},"One-to-Many"),(0,i.kt)("p",null,"With the Java SDK, you could define one-to-many relationships with fields\nof type ",(0,i.kt)("inlineCode",{parentName:"p"},"RealmList"),". The Kotlin SDK still uses fields of\ntype ",(0,i.kt)("inlineCode",{parentName:"p"},"RealmList"),", but you should instantiate ",(0,i.kt)("inlineCode",{parentName:"p"},"RealmList"),"\ninstances with the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm/realm-list-of.html"},(0,i.kt)("inlineCode",{parentName:"a"},"realmListOf()")),"\ncompanion method."),(0,i.kt)("table",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"java-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Java SDK (Kotlin)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},"open class Kid : RealmObject() {\n    var frogs = RealmList<Frog>()\n}\n")),(0,i.kt)(r.Z,{value:"java",label:"Java SDK (Java)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"java",mdxType:"CodeBlock"},"public class Kid\n        extends RealmObject {\n    public RealmList<Frog> frogs =\n            new RealmList<Frog>();\n}\n")))),(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"kotlin-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin SDK",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},"class Kid : RealmObject {\n    var frogs: RealmList<Frog> =\n        realmListOf()\n}\n")))))),(0,i.kt)("h2",{id:"schema-types"},"Schema Types"),(0,i.kt)("p",null,"With the Java SDK, you needed to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Required")," annotation to\nmake lists of primitives non-nullable in realm object models. The Kotlin\nSDK makes lists of primitives non-nullable by default. Use the\n",(0,i.kt)("inlineCode",{parentName:"p"},"?")," operator to make a list of primitives nullable."),(0,i.kt)("table",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"java-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Java SDK (Kotlin)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},"open class CollegeStudent : RealmObject() {\n    @Required\n    var notes = RealmList<String>()\n    var nullableNotes = RealmList<String>()\n}\n")),(0,i.kt)(r.Z,{value:"java",label:"Java SDK (Java)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"java",mdxType:"CodeBlock"},"public class CollegeStudent\n        extends RealmObject {\n    @Required\n    public RealmList<String> notes =\n            new RealmList<String>();\n    public RealmList<String> nullableNotes =\n            new RealmList<String>();\n}\n")))),(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"kotlin-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin SDK",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},"class Student : RealmObject {\n    var notes: RealmList<String> =\n        realmListOf()\n    var nullableNotes: RealmList<String?> =\n        realmListOf()\n}\n")))))),(0,i.kt)("h2",{id:"writes"},"Writes"),(0,i.kt)("p",null,"The Kotlin SDK introduces new names for the methods that write to realms."),(0,i.kt)("h3",{id:"async"},"Async"),(0,i.kt)("p",null,"With the Java SDK, you could write asynchronously to a realm with\n",(0,i.kt)("inlineCode",{parentName:"p"},"realm.executeTransactionAsync()"),". The Kotlin SDK uses\nthe suspend function ",(0,i.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm/-realm/write.html"},(0,i.kt)("inlineCode",{parentName:"a"},"realm.write()"))," instead."),(0,i.kt)("table",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"java-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Java SDK (Kotlin)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},'realm.executeTransactionAsync {\n        transactionRealm: Realm ->\n    val sample: Sample =\n        Sample()\n    sample.stringField = "Sven"\n    transactionRealm.copyToRealm(\n        sample\n    )\n}\n')),(0,i.kt)(r.Z,{value:"java",label:"Java SDK (Java)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"java",mdxType:"CodeBlock"},'realm.executeTransactionAsync(\n        transactionRealm -> {\n    Sample sample = new Sample();\n    sample.stringField = "Sven";\n    transactionRealm.copyToRealm(sample);\n});\n')))),(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"kotlin-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin SDK",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},'realm.write {\n    // this: MutableRealm\n    val sample = Sample()\n    sample.stringField = "Sven"\n    this.copyToRealm(sample)\n}\n')))))),(0,i.kt)("h3",{id:"sync"},"Sync"),(0,i.kt)("p",null,"With the Java SDK, you could write synchronously to a realm with\n",(0,i.kt)("inlineCode",{parentName:"p"},"realm.executeTransaction()"),". The Kotlin SDK uses\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm/-realm/write-blocking.html"},(0,i.kt)("inlineCode",{parentName:"a"},"realm.writeBlocking()")),":"),(0,i.kt)("table",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"java-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Java SDK (Kotlin)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},'realm.executeTransaction {\n        transactionRealm: Realm ->\n    val sample: Sample =\n        Sample()\n    sample.stringField = "Sven"\n    transactionRealm.copyToRealm(\n        sample\n    )\n}\n')),(0,i.kt)(r.Z,{value:"java",label:"Java SDK (Java)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"java",mdxType:"CodeBlock"},'realm.executeTransaction(\n        transactionRealm -> {\n    Sample sample = new Sample();\n    sample.stringField = "Sven";\n    transactionRealm.copyToRealm(sample);\n});\n')))),(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"kotlin-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin SDK",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},'realm.writeBlocking {\n    // this: MutableRealm\n    val sample = Sample()\n    sample.stringField = "Sven"\n    this.copyToRealm(sample)\n}\n')))))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"See Also")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/sdk/kotlin/realm-database/create/create-a-new-object"},"Create a New Object (Kotlin SDK)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/sdk/kotlin/realm-database/update/modify-an-object"},"Modify an Object (Kotlin SDK)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/sdk/kotlin/realm-database/delete/delete-an-object"},"Delete an Object (Kotlin SDK)"))))),(0,i.kt)("h2",{id:"queries"},"Queries"),(0,i.kt)("p",null,"There are several differences between queries in the Java SDK and queries\nin the Kotlin SDK:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"With the Java SDK, you can query objects in realms using a fluent\ninterface or ",(0,i.kt)("a",{parentName:"p",href:"/sdk/kotlin/realm-database/query-language"},"Realm Query Language")," (RQL).\nThe Kotlin SDK only uses RQL.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The Java SDK uses ",(0,i.kt)("inlineCode",{parentName:"p"},"realm.where()"),"\nto query realms, whereas the Kotlin SDK uses ",(0,i.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm/query.html"},(0,i.kt)("inlineCode",{parentName:"a"},"realm.query()")),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"With the Java SDK, you could query asynchronously with\n",(0,i.kt)("inlineCode",{parentName:"p"},"realmQuery.findAllAsync()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"realmQuery.findFirstAsync()"),".\nIn the Kotlin SDK, query asynchronously with\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm.query/-realm-element-query/as-flow.html"},(0,i.kt)("inlineCode",{parentName:"a"},"realmQuery.asFlow()")),".\nOnce you have a flow of results, you can ",(0,i.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/collect.html"},(0,i.kt)("inlineCode",{parentName:"a"},"collect()")),"\nthe results.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"With the Java SDK, you could query synchronously with\n",(0,i.kt)("inlineCode",{parentName:"p"},"realmQuery.findAll()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"realmQuery.findFirst()"),".\nIn the Kotlin SDK, query synchronously with\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm.query/-realm-element-query/find.html"},(0,i.kt)("inlineCode",{parentName:"a"},"realmQuery.find()")),"."))),(0,i.kt)("h3",{id:"filters"},"Filters"),(0,i.kt)("table",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"java-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Java SDK (Kotlin)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},'val samples =\n    realm.where(\n        Sample::class.java\n    ).findAll()\nval samplesThatBeginWithN =\n    realm.where(\n        Sample::class.java\n    )\n        .beginsWith(\n            "stringField",\n            "N"\n        ).findAll()\n')),(0,i.kt)(r.Z,{value:"java",label:"Java SDK (Java)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"java",mdxType:"CodeBlock"},'RealmResults<Sample> samples =\n        realm\n            .where(Sample.class)\n            .findAll();\n\nRealmResults<Sample> samplesThatBeginWithN =\n        realm\n            .where(Sample.class)\n            .beginsWith("stringField",\n                    "N")\n            .findAll();\n')))),(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"kotlin-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin SDK",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},"val samples: RealmResults<Sample> =\n    realm.query<Sample>().find()\n\nval samplesThatBeginWithN:\n        RealmResults<Sample> =\n    realm.query<Sample>(\n        \"stringField BEGINSWITH 'N'\"\n    ).find()\n")))))),(0,i.kt)("h2",{id:"sort-distinct-limit"},"Sort, Distinct, Limit"),(0,i.kt)("table",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"java-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Java SDK (Kotlin)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},'val aggregates =\n    realm.where(\n        Sample::class.java\n    )\n        .distinct("stringField")\n        .sort(\n            "stringField",\n            Sort.ASCENDING\n        )\n        .limit(2)\n        .findAll()\n')),(0,i.kt)(r.Z,{value:"java",label:"Java SDK (Java)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"java",mdxType:"CodeBlock"},'RealmResults<Sample> aggregates =\n        realm.where(Sample.class)\n        .distinct("stringField")\n        .sort("stringField",\n                Sort.ASCENDING)\n        .limit(2)\n        .findAll();\n')))),(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"kotlin-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin SDK",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},"val aggregates: RealmResults<Sample> =\n    realm.query<Sample>()\n        .distinct(Sample::stringField.name)\n        .sort(Sample::stringField.name,\n            Sort.ASCENDING)\n        .limit(2)\n        .find()\n")))))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"See Also")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("a",{parentName:"p",href:"/sdk/kotlin/realm-database/query-language"},"Realm Query Language (Kotlin SDK)")))),(0,i.kt)("h2",{id:"deletes"},"Deletes"),(0,i.kt)("p",null,"In both SDKs, you can only delete live objects. The Kotlin SDK provides\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm/-mutable-realm/find-latest.html"},(0,i.kt)("inlineCode",{parentName:"a"},"mutableRealm.findLatest()")),"\nto access a live version of any frozen object."),(0,i.kt)("table",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"java-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Java SDK (Kotlin)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},"val sample =\n    realm.where(\n        Sample::class.java\n    ).findFirst()\n\n// delete one object synchronously\nrealm.executeTransaction {\n        transactionRealm: Realm? ->\n    sample!!.deleteFromRealm()\n}\n\n// delete a query result asynchronously\nrealm.executeTransactionAsync {\n        backgroundRealm: Realm ->\n    backgroundRealm.where(\n        Sample::class.java\n    ).findFirst()!!.deleteFromRealm()\n}\n")),(0,i.kt)(r.Z,{value:"java",label:"Java SDK (Java)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"java",mdxType:"CodeBlock"},"Sample sample =\n        realm.where(Sample.class)\n                .findFirst();\n\n// delete one object synchronously\nrealm.executeTransaction(\n        transactionRealm ->\n        sample.deleteFromRealm());\n\n// delete a query result asynchronously\nrealm.executeTransactionAsync(\n        backgroundRealm ->\n        backgroundRealm\n                .where(Sample.class)\n                .findFirst()\n                .deleteFromRealm());\n")))),(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"kotlin-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin SDK",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},m.Z)))))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"See Also")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/sdk/kotlin/realm-database/delete/delete-all-objects-of-a-type"},"Delete all Objects of a Type (Kotlin SDK)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/sdk/kotlin/realm-database/delete/delete-multiple-objects"},"Delete Multiple Objects (Kotlin SDK)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/sdk/kotlin/realm-database/delete/delete-an-object"},"Delete an Object (Kotlin SDK)"))))),(0,i.kt)("h2",{id:"notifications"},"Notifications"),(0,i.kt)("p",null,"In both SDKs, you can subscribe to change to collections of results.\nWith the Java SDK, you could receive notifications whenever realm results\nchanged with the following interfaces:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"realmResults.addChangeListener()")),(0,i.kt)("li",{parentName:"ul"},"RxJava through ",(0,i.kt)("inlineCode",{parentName:"li"},"asFlowable()")),(0,i.kt)("li",{parentName:"ul"},"Kotlin Extensions with ",(0,i.kt)("inlineCode",{parentName:"li"},"toFlow()"))),(0,i.kt)("p",null,"The Kotlin SDK replaces all of these options with ",(0,i.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm.query/-realm-element-query/as-flow.html"},(0,i.kt)("inlineCode",{parentName:"a"},"realmQuery.asFlow()")),".\nOnce you have a flow of results, you can call ",(0,i.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/collect.html"},(0,i.kt)("inlineCode",{parentName:"a"},"collect()")),"\nto subscribe to changes. Any object of type ",(0,i.kt)("inlineCode",{parentName:"p"},"UpdatedResults")," emitted\nby the flow represents a change to the results set."),(0,i.kt)("table",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"java-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Java SDK (Kotlin)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},'realm.where(Sample::class.java)\n    .findAllAsync()\n    .addChangeListener {\n            samples: RealmResults<Sample>?,\n            changeSet: OrderedCollectionChangeSet ->\n        // log change description\n        Log.v(\n            "EXAMPLE",\n            ("Results changed. " +\n                "change ranges: " +\n                Arrays.toString(\n                    changeSet\n                        .changeRanges\n                ) +\n                ", insertion ranges: " +\n                Arrays.toString(\n                    changeSet\n                        .insertionRanges\n                ) +\n                ", deletion ranges: " +\n                Arrays.toString(\n                    changeSet\n                        .deletionRanges\n                ))\n        )\n    }\n')),(0,i.kt)(r.Z,{value:"java",label:"Java SDK (Java)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"java",mdxType:"CodeBlock"},'realm.where(Sample.class).findAllAsync()\n    .addChangeListener(\n            (samples, changeSet) -> {\n        // log change description\n        Log.v("EXAMPLE",\n            "Results changed. " +\n            "change ranges: " +\n            Arrays.toString(\n                changeSet\n                    .getChangeRanges()) +\n            ", insertion ranges: " +\n            Arrays.toString(\n                changeSet\n                    .getInsertionRanges()) +\n            ", deletion ranges: " +\n            Arrays.toString(\n                changeSet\n                    .getDeletionRanges()));\n    });\n')))),(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"kotlin-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin SDK",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},'// in a coroutine or a suspend function\nrealm.query<Sample>().asFlow().collect {\n        results: ResultsChange<Sample> ->\n    when (results) {\n        is InitialResults<Sample> -> {\n            // do nothing with the\n            // initial set of results\n        }\n        is UpdatedResults<Sample> -> {\n            // log change description\n            Log.v("Results changed. " +\n                "change ranges: " +\n                results.changeRanges +\n                ", insertion ranges: " +\n                results.insertionRanges +\n                ", deletion ranges: " +\n                results.deletionRanges\n            )\n        }\n    }\n}\n')))))),(0,i.kt)("h2",{id:"threading"},"Threading"),(0,i.kt)("p",null,"With the Java SDK, realms, Realm objects, and results cannot be passed\nbetween threads. The Kotlin SDK freezes these objects by default, making\nthem thread-safe. Unlike the live objects used by the Java SDK, the\nfrozen objects found in the Kotlin SDK do not automatically update when\nunderlying data changes. With the Kotlin SDK, you must use notifications to subscribe to\nupdates instead."),(0,i.kt)("table",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"java-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Java SDK (Kotlin)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},'realm = Realm.getInstance(config)\nval sample =\n    realm.where(\n        Sample::class.java\n    ).findFirst()\n// save sample field in a\n// separate variable\n// for access on another thread\nval sampleStringField =\n    sample!!.stringField\nval executorService =\n    Executors.newFixedThreadPool(4)\nexecutorService.execute {\n    // cannot pass a realm\n    // into another thread,\n    // so get a new instance\n    // for separate thread\n    val threadRealm =\n        Realm.getInstance(config)\n    // cannot access original\n    // sample on another\n    // thread, use\n    // sampleStringField instead\n    val threadSample =\n        threadRealm.where(\n            Sample::class.java\n        )\n            .equalTo(\n                "stringField",\n                sampleStringField\n            ).findFirst()\n    Log.v(\n        "EXAMPLE",\n        "Separate thread sample: " +\n                threadSample\n    )\n}\n')),(0,i.kt)(r.Z,{value:"java",label:"Java SDK (Java)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"java",mdxType:"CodeBlock"},'realm = Realm.getInstance(config);\nSample sample = realm\n        .where(Sample.class).findFirst();\n// save sample field in a variable\n// for access on another thread\nString sampleStringField =\n        sample.stringField;\nExecutorService executorService =\n        Executors.newFixedThreadPool(4);\nexecutorService.execute(() -> {\n    // cannot pass a realm\n    // into another thread,\n    // so get a new instance\n    // for separate thread\n    Realm threadRealm =\n            Realm.getInstance(config);\n    // cannot access original\n    // sample on another\n    // thread, use\n    // sampleStringField instead\n    Sample threadSample =\n            threadRealm\n                    .where(Sample.class)\n            .equalTo("stringField",\n                    sampleStringField)\n                    .findFirst();\n    Log.v("EXAMPLE",\n            "Separate thread sample: "\n            + threadSample);\n});\n')))),(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"kotlin-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin SDK",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},"val realm = Realm.open(config)\nval sample: Sample? =\n    realm.query<Sample>()\n        .first()\n        .find()\n\nlaunch(Dispatchers.Unconfined) {\n    // can access the realm opened on\n    // a different thread\n    realm.query<Sample>().find()\n    // can access realm object queried\n    // on a different thread\n    Log.v(sample!!.stringField)\n}.join()\n")))))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"See Also")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("a",{parentName:"p",href:"/sdk/kotlin/realm-database/frozen-architecture"},"Frozen Architecture (Kotlin SDK)")))),(0,i.kt)("h2",{id:"migrations"},"Migrations"),(0,i.kt)("p",null,"With the Java SDK, migrations were a manual process. The Kotlin SDK\nautomates migrations, but also gives you access to a similar dynamic\nrealm interface for custom tweaks to migration logic."),(0,i.kt)("table",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"java-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Java SDK (Kotlin)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},'val config =\n    RealmConfiguration.Builder()\n    .migration { realm: DynamicRealm,\n                 oldVersion: Long,\n                 newVersion: Long ->\n        val schema: RealmSchema =\n            realm.schema\n        if (oldVersion == 0L) {\n            // perform schema migration\n            schema.get("Sample")\n                ?.addField(\n                    "new_field",\n                    String::class.java\n                )\n        }\n\n        // migrate data\n        schema.get("Sample")\n            ?.transform {\n                    obj: DynamicRealmObject ->\n                obj.set(\n                    "longField",\n                    42L\n                )\n            }\n    }.build()\nval realm: Realm =\n    Realm.getInstance(config)\nLog.v(\n    "EXAMPLE",\n    "Successfully opened a realm: "\n            + realm.path\n)\n')),(0,i.kt)(r.Z,{value:"java",label:"Java SDK (Java)",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"java",mdxType:"CodeBlock"},'RealmConfiguration config =\n    new RealmConfiguration.Builder()\n            .migration((realm,\n                        oldVersion,\n                        newVersion) -> {\n        RealmSchema schema =\n                realm.getSchema();\n\n        if (oldVersion == 0L) {\n            // perform schema migration\n            schema.get("Sample")\n                .addField("new_field",\n                        String.class);\n        }\n\n        // migrate data\n        schema.get("Sample")\n            .transform(obj ->\n                obj.set("longField",\n                        42L));\n    }).build();\n\nRealm realm;\nrealm = Realm.getInstance(config);\nLog.v("EXAMPLE",\n"Successfully opened a realm: "\n        + realm.getPath());\n')))),(0,i.kt)("td",null,(0,i.kt)(o.Z,{groupId:"kotlin-sdk-languages",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin SDK",mdxType:"TabItem"},(0,i.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},'// A Realm migration that performs\n// automatic schema migration\n// and allows additional custom\n// migration of data.\nRealmConfiguration.Builder(\n    schema = setOf(Sample::class))\n    .migration(AutomaticSchemaMigration {\n            context:\n                AutomaticSchemaMigration.MigrationContext ->\n        val oldRealm:\n                DynamicRealm =\n            context.oldRealm\n        val newRealm:\n                DynamicMutableRealm =\n            context.newRealm\n        // dynamic realm gives access\n        // to realm data\n        // through a generic string\n        // based API\n        context.enumerate("Sample") {\n                oldObject:\n                    DynamicRealmObject,\n                newObject:\n                    DynamicMutableRealmObject? ->\n            newObject?.set("longField",\n                            42L)\n        }\n    })\n    .build()\nval realm = Realm.open(config)\n')))))),(0,i.kt)("h2",{id:"what-next"},"What Next?"),(0,i.kt)("p",null,"Now that you understand the differences between the Java SDK and the\nKotlin SDK, check out the rest of the ",(0,i.kt)("a",{parentName:"p",href:"/sdk/kotlin/intro"},"Kotlin SDK documentation"),"."))}g.isMDXComponent=!0},1128:function(e,a){a.Z="val sample: Sample? =\n    realm.query<Sample>()\n        .first().find()\n\n// delete one object synchronously\nrealm.writeBlocking {\n    val liveSample: Sample? =\n        this.findLatest(sample!!)\n    liveSample?.delete()\n}\n\n// delete a query result asynchronously\nGlobalScope.launch {\n    realm.write {\n        query<Sample>()\n            .first()\n            .find()\n            .also { delete(it!!) }\n    }\n}\n"}}]);