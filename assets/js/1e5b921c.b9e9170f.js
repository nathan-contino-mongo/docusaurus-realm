"use strict";(self.webpackChunkflutter_sdk_docs=self.webpackChunkflutter_sdk_docs||[]).push([[251],{2666:function(e,t,a){a.r(t),a.d(t,{contentTitle:function(){return m},default:function(){return u},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),i=a(1736),s=["components"],l={title:"Upsert an Object"},m=void 0,p={unversionedId:"sdk/kotlin/realm-database/update/upsert-an-object",id:"sdk/kotlin/realm-database/update/upsert-an-object",title:"Upsert an Object",description:"The upsert operation either inserts a new instance of an object or",source:"@site/docs/sdk/kotlin/realm-database/update/upsert-an-object.mdx",sourceDirName:"sdk/kotlin/realm-database/update",slug:"/sdk/kotlin/realm-database/update/upsert-an-object",permalink:"/docusaurus-realm/sdk/kotlin/realm-database/update/upsert-an-object",tags:[],version:"current",frontMatter:{title:"Upsert an Object"},sidebar:"kotlin",previous:{title:"Modify an Object",permalink:"/docusaurus-realm/sdk/kotlin/realm-database/update/modify-an-object"},next:{title:"Delete an Object",permalink:"/docusaurus-realm/sdk/kotlin/realm-database/delete/delete-an-object"}},c=[],d={toc:c};function u(e){var t=e.components,a=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"upsert")," operation either inserts a new instance of an object or\nupdates an existing object that meets certain criteria."),(0,o.kt)("p",null,"To upsert into a realm:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Open a write transaction with ",(0,o.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm/-realm/write.html"},(0,o.kt)("inlineCode",{parentName:"a"},"realm.write()")),"\nor ",(0,o.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm/-realm/write-blocking.html"},(0,o.kt)("inlineCode",{parentName:"a"},"realm.writeBlocking()")),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Query the transaction's mutable realm with ",(0,o.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm.query/-realm-query/query.html"},(0,o.kt)("inlineCode",{parentName:"a"},"realm.query()")),".\nSpecify the object type as a type parameter passed to ",(0,o.kt)("inlineCode",{parentName:"p"},"query()"),".\nFilter your criteria with unique identifying criteria for the\nobject you want to upsert.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Insert a new object with the same primary key as the object returned\nby the previous query (if it exists) with ",(0,o.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm/-mutable-realm/copy-to-realm.html"},(0,o.kt)("inlineCode",{parentName:"a"},"copyToRealm()")),".\nIf an object matching your filter already exists, realm updates the\nexisting object. If no object exists that matches your filter, realm\ninserts a new object."))),(0,o.kt)(i.Z,{language:"kotlin",mdxType:"CodeBlock"},'realm.write {\n    // fetch a frog from the realm based on some query\n    val frog: Frog? =\n        this.query<Frog>("name == \'Wirt\'").first().find()\n    // if the query returned an object, update object from the query\n    if (frog != null) {\n        frog.age = 4\n        frog.species = "Greyfrog"\n        frog.owner = "L\'oric"\n    } else {\n        // if the query returned no object, insert a new object with a new primary key.\n        this.copyToRealm(Frog().apply {\n            _id = Random.nextLong(1000000)\n            name = "Wirt"\n            age = 4\n            species = "Greyfrog"\n            owner = "L\'oric"\n        })\n    }\n}\n'),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"You can only modify objects in a realm within a\n",(0,o.kt)("a",{parentName:"p",href:"/sdk/kotlin/realm-database/write-transactions"},"write transaction"),"."))))}u.isMDXComponent=!0}}]);