"use strict";(self.webpackChunkflutter_sdk_docs=self.webpackChunkflutter_sdk_docs||[]).push([[506],{9880:function(e,t,a){a.r(t),a.d(t,{contentTitle:function(){return d},default:function(){return p},frontMatter:function(){return i},metadata:function(){return m},toc:function(){return c}});var n=a(7462),o=a(3366),r=(a(7294),a(3905)),s=a(1736),l=["components"],i={title:"Find Objects of a Type"},d=void 0,m={unversionedId:"sdk/kotlin/realm-database/read/find-objects-of-a-type",id:"sdk/kotlin/realm-database/read/find-objects-of-a-type",title:"Find Objects of a Type",description:"To find all objects of a type, open a realm",source:"@site/docs/sdk/kotlin/realm-database/read/find-objects-of-a-type.mdx",sourceDirName:"sdk/kotlin/realm-database/read",slug:"/sdk/kotlin/realm-database/read/find-objects-of-a-type",permalink:"/docusaurus-realm/sdk/kotlin/realm-database/read/find-objects-of-a-type",tags:[],version:"current",frontMatter:{title:"Find Objects of a Type"},sidebar:"kotlin",previous:{title:"Find Object by Primary Key",permalink:"/docusaurus-realm/sdk/kotlin/realm-database/read/find-object-by-primary-key"},next:{title:"Sort Queries",permalink:"/docusaurus-realm/sdk/kotlin/realm-database/read/sort-queries"}},c=[],u={toc:c};function p(e){var t=e.components,a=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"To find all objects of a type, open a realm\nand pass the type as a type parameter to ",(0,r.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm.query/-realm-query/query.html"},(0,r.kt)("inlineCode",{parentName:"a"},"realm.query()")),":"),(0,r.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},'// fetch all objects of a type as a flow, asynchronously\nval frogsFlow: Flow<ResultsChange<Frog>> = realm.query<Frog>().asFlow()\nval asyncCall: Deferred<Unit> = async {\n    frogsFlow.collect { results ->\n        when (results) {\n            // print out initial results\n            is InitialResults<Frog> -> {\n                for (frog in results.list) {\n                    Log.v("Frog: $frog")\n                }\n            } else -> {\n                // do nothing on changes\n            }\n        }\n    }\n}\n\n// fetch all objects of a type as a results collection, synchronously\nval frogs: RealmResults<Frog> = realm.query<Frog>().find()\nfor(frog in frogs) {\n    Log.v("Frog: $frog")\n}\n'),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),(0,r.kt)("inlineCode",{parentName:"h5"},"find()")," is Synchronous")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm.query/find.html"},(0,r.kt)("inlineCode",{parentName:"a"},"find()")),"\nruns a synchronous query on the thread it is called from.\nAs a result, avoid using ",(0,r.kt)("inlineCode",{parentName:"p"},"find()")," on the UI thread or in\nlogic that could delay the UI thread. Prefer ",(0,r.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm.query/-realm-element-query/as-flow.html"},(0,r.kt)("inlineCode",{parentName:"a"},"asFlow()")),"\nin time sensitive environments."))))}p.isMDXComponent=!0}}]);