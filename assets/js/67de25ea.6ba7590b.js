"use strict";(self.webpackChunkflutter_sdk_docs=self.webpackChunkflutter_sdk_docs||[]).push([[997],{3033:function(e,t,a){a.r(t),a.d(t,{contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return d}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),o=a(1736),s=["components"],l={title:"Write Transactions"},c=void 0,m={unversionedId:"sdk/kotlin/realm-database/write-transactions",id:"sdk/kotlin/realm-database/write-transactions",title:"Write Transactions",description:"Overview",source:"@site/docs/sdk/kotlin/realm-database/write-transactions.mdx",sourceDirName:"sdk/kotlin/realm-database",slug:"/sdk/kotlin/realm-database/write-transactions",permalink:"/docusaurus-realm/sdk/kotlin/realm-database/write-transactions",tags:[],version:"current",frontMatter:{title:"Write Transactions"},sidebar:"kotlin",previous:{title:"Realm Query Language",permalink:"/docusaurus-realm/sdk/kotlin/realm-database/query-language"},next:{title:"Frozen Architecture",permalink:"/docusaurus-realm/sdk/kotlin/realm-database/frozen-architecture"}},d=[{value:"Overview",id:"overview",children:[],level:2},{value:"Run a Transaction",id:"run-a-transaction",children:[{value:"Example",id:"example",children:[],level:3}],level:2}],h={toc:d};function p(e){var t=e.components,a=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Realm Database")," uses a highly efficient storage engine\nto persist objects. You can ",(0,i.kt)("strong",{parentName:"p"},"create")," objects in a realm,\n",(0,i.kt)("strong",{parentName:"p"},"update")," objects in a realm, and eventually ",(0,i.kt)("strong",{parentName:"p"},"delete"),"\nobjects from a realm. Because these operations modify the\nstate of the realm, we call them writes."),(0,i.kt)("p",null,"Realm handles writes in terms of ",(0,i.kt)("strong",{parentName:"p"},"transactions"),". A\ntransaction is a list of read and write operations that\nRealm treats as a single indivisible operation. In other\nwords, a transaction is ",(0,i.kt)("em",{parentName:"p"},"all or nothing"),": either all of the\noperations in the transaction succeed or none of the\noperations in the transaction take effect."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"All writes must happen in a transaction."))),(0,i.kt)("p",null,"A realm allows only one open write transaction at a time. Realm\nblocks other writes on other threads until the open\ntransaction is complete. Consequently, there is no race\ncondition when reading values from the realm within a\ntransaction."),(0,i.kt)("p",null,"When you are done with your transaction, Realm either\n",(0,i.kt)("strong",{parentName:"p"},"commits")," it or ",(0,i.kt)("strong",{parentName:"p"},"cancels")," it:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When Realm ",(0,i.kt)("strong",{parentName:"li"},"commits")," a transaction, it writes\nall changes to disk. For synced realms, the SDK queues the change\nfor synchronization with the backend."),(0,i.kt)("li",{parentName:"ul"},"When Realm ",(0,i.kt)("strong",{parentName:"li"},"cancels"),' a write transaction or an operation in\nthe transaction causes an error, all changes are discarded\n(or "rolled back").')),(0,i.kt)("h2",{id:"run-a-transaction"},"Run a Transaction"),(0,i.kt)("p",null,"Realm represents each transaction as a callback function\nthat contains zero or more read and write operations. To run\na transaction, define a transaction callback and pass it to\nthe realm's ",(0,i.kt)("inlineCode",{parentName:"p"},"write")," method. Within this callback, you are\nfree to create, read, update, and delete on the realm. If\nthe code in the callback throws an exception when Realm runs\nit, Realm cancels the transaction. Otherwise, Realm commits\nthe transaction immediately after the callback."),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,"The following code shows how to run a transaction with\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm/-realm/write.html"},(0,i.kt)("inlineCode",{parentName:"a"},"write()")),"\nor ",(0,i.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm/-realm/write-blocking.html"},(0,i.kt)("inlineCode",{parentName:"a"},"writeBlocking()")),".\nIf the code in the callback throws an exception, Realm\ncancels the transaction. Otherwise, Realm commits the\ntransaction."),(0,i.kt)(o.Z,{language:"kotlin",mdxType:"CodeBlock"},'realm.write {\n    // create a frog object in the realm\n    val frog = this.copyToRealm(Frog().apply {\n        name = "Kermit"\n        age = 45\n        species = "Green"\n        owner = "Jim"\n    })\n\n    // update the frog\n    frog.age = frog.age + 1\n\n    // get all frogs that belong to Jim\n    val jimsFrogs = this.query<Frog>("owner == \'Jim\'").find()\n\n    // give all of Jim\'s frogs to Brian\n    jimsFrogs.forEach {\n        it.owner = "Brian"\n    }\n}\n'))}p.isMDXComponent=!0}}]);