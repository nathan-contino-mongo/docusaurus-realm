"use strict";(self.webpackChunkflutter_sdk_docs=self.webpackChunkflutter_sdk_docs||[]).push([[104],{3936:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return d},default:function(){return k},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return u}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),s=n(1736),i=["components"],l={title:"Sort Queries"},d=void 0,m={unversionedId:"sdk/kotlin/realm-database/read/sort-queries",id:"sdk/kotlin/realm-database/read/sort-queries",title:"Sort Queries",description:"To sort results, specify a sort in the query passed to",source:"@site/docs/sdk/kotlin/realm-database/read/sort-queries.mdx",sourceDirName:"sdk/kotlin/realm-database/read",slug:"/sdk/kotlin/realm-database/read/sort-queries",permalink:"/docusaurus-realm/sdk/kotlin/realm-database/read/sort-queries",tags:[],version:"current",frontMatter:{title:"Sort Queries"},sidebar:"kotlin",previous:{title:"Find Objects of a Type",permalink:"/docusaurus-realm/sdk/kotlin/realm-database/read/find-objects-of-a-type"},next:{title:"Iteration",permalink:"/docusaurus-realm/sdk/kotlin/realm-database/read/iteration"}},u=[],c={toc:u};function k(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"To sort results, specify a sort in the query passed to\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm.query/-realm-query/query.html"},(0,o.kt)("inlineCode",{parentName:"a"},"realm.query()")),"\nwith the ",(0,o.kt)("inlineCode",{parentName:"p"},"SORT")," keyword. Similarly, use ",(0,o.kt)("inlineCode",{parentName:"p"},"DISTINCT"),"\nto constrain results to unique values of a field, and\n",(0,o.kt)("inlineCode",{parentName:"p"},"LIMIT")," to cap the number of results. The SDK\nprovides convenience methods on ",(0,o.kt)("inlineCode",{parentName:"p"},"RealmQuery")," so you don't have\nto manually write the keywords:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm.query/-realm-query/sort.html"},(0,o.kt)("inlineCode",{parentName:"a"},"realmQuery.sort()"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm.query/-realm-query/distinct.html"},(0,o.kt)("inlineCode",{parentName:"a"},"realmQuery.distinct()"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm.query/-realm-query/limit.html"},(0,o.kt)("inlineCode",{parentName:"a"},"realmQuery.limit()")))),(0,o.kt)("p",null,"When used on the same query in both RQL and method form, ",(0,o.kt)("inlineCode",{parentName:"p"},"SORT"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"DISTINCT"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"LIMIT")," execute in the order they're added\nto the query. This can impact the results returned from your query."),(0,o.kt)(s.Z,{language:"kotlin",mdxType:"CodeBlock"},'// sort in descending order, frogs with distinct owners, only the first 5, with convenience methods\nval convenientlyOrganizedFrogs: Flow<ResultsChange<Frog>> =\n    realm.query<Frog>("name = \'George Washington\'")\n        .sort("age", Sort.DESCENDING).distinct("owner").limit(5).asFlow()\nval asyncCallConvenience: Deferred<Unit> = async {\n    convenientlyOrganizedFrogs.collect { results ->\n        when (results) {\n            // print out initial results\n            is InitialResults<Frog> -> {\n                for (frog in results.list) {\n                    Log.v("Frog: $frog")\n                }\n            } else -> {\n                // do nothing on changes\n            }\n        }\n    }\n}\n\n// sort in descending order, frogs with distinct owners, only the first 5, using RQL\nval somewhatLessConvenientlyOrganizedFrogs: Flow<ResultsChange<Frog>> =\n    realm.query<Frog>("name = \'George Washington\' SORT(age DESC) DISTINCT(owner) LIMIT(5)").asFlow()\nval asyncCallLessConvenient: Deferred<Unit> = async {\n    somewhatLessConvenientlyOrganizedFrogs.collect { results ->\n        when (results) {\n            // print out initial results\n            is InitialResults<Frog> -> {\n                for (frog in results.list) {\n                    Log.v("Frog: $frog")\n                }\n            } else -> {\n                // do nothing on changes\n            }\n        }\n    }\n}\n'),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),(0,o.kt)("inlineCode",{parentName:"h5"},"find()")," is Synchronous")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm.query/find.html"},(0,o.kt)("inlineCode",{parentName:"a"},"find()")),"\nruns a synchronous query on the thread it is called from.\nAs a result, avoid using ",(0,o.kt)("inlineCode",{parentName:"p"},"find()")," on the UI thread or in\nlogic that could delay the UI thread. Prefer ",(0,o.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm.query/-realm-element-query/as-flow.html"},(0,o.kt)("inlineCode",{parentName:"a"},"asFlow()")),"\nin time sensitive environments."))))}k.isMDXComponent=!0}}]);