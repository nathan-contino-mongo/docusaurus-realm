"use strict";(self.webpackChunkflutter_sdk_docs=self.webpackChunkflutter_sdk_docs||[]).push([[874],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),d=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=d(e.components);return i.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),c=d(t),m=a,k=c["".concat(s,".").concat(m)]||c[m]||p[m]||o;return t?i.createElement(k,l(l({ref:n},u),{},{components:t})):i.createElement(k,l({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=c;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,l[1]=r;for(var d=2;d<o;d++)l[d]=t[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8215:function(e,n,t){var i=t(7294);n.Z=function(e){var n=e.children,t=e.hidden,a=e.className;return i.createElement("div",{role:"tabpanel",hidden:t,className:a},n)}},9877:function(e,n,t){t.d(n,{Z:function(){return u}});var i=t(7462),a=t(7294),o=t(2389),l=t(9548),r=t(6010),s="tabItem_LplD";function d(e){var n,t,o,d=e.lazy,u=e.block,p=e.defaultValue,c=e.values,m=e.groupId,k=e.className,g=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=c?c:g.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),f=(0,l.lx)(h,(function(e,n){return e.value===n.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===p?p:null!=(n=null!=p?p:null==(t=g.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(o=g[0])?void 0:o.props.value;if(null!==v&&!h.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=(0,l.UB)(),y=b.tabGroupChoices,N=b.setTabGroupChoices,M=(0,a.useState)(v),x=M[0],T=M[1],C=[],w=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var A=y[m];null!=A&&A!==x&&h.some((function(e){return e.value===A}))&&T(A)}var S=function(e){var n=e.currentTarget,t=C.indexOf(n),i=h[t].value;i!==x&&(w(n),T(i),null!=m&&N(m,i))},O=function(e){var n,t=null;switch(e.key){case"ArrowRight":var i=C.indexOf(e.currentTarget)+1;t=C[i]||C[0];break;case"ArrowLeft":var a=C.indexOf(e.currentTarget)-1;t=C[a]||C[C.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":u},k)},h.map((function(e){var n=e.value,t=e.label,o=e.attributes;return a.createElement("li",(0,i.Z)({role:"tab",tabIndex:x===n?0:-1,"aria-selected":x===n,key:n,ref:function(e){return C.push(e)},onKeyDown:O,onFocus:S,onClick:S},o,{className:(0,r.Z)("tabs__item",s,null==o?void 0:o.className,{"tabs__item--active":x===n})}),null!=t?t:n)}))),d?(0,a.cloneElement)(g.filter((function(e){return e.props.value===x}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},g.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==x})}))))}function u(e){var n=(0,o.Z)();return a.createElement(d,(0,i.Z)({key:String(n)},e))}},5078:function(e,n,t){t.d(n,{ZP:function(){return s}});var i=t(7462),a=t(3366),o=(t(7294),t(3905)),l=["components"],r={toc:[]};function s(e){var n=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,i.Z)({},r,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://developer.android.com/studio/index.html"},"Android Studio"),"\nversion 4.2.2 or higher."),(0,o.kt)("li",{parentName:"ul"},"JDK 11 or higher"),(0,o.kt)("li",{parentName:"ul"},"Kotlin Plugin for Android Studio, version 1.5.20 or higher."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://kotlinlang.org/docs/mobile/kmm-plugin-releases.html#release-details"},"Kotlin Multiplatform Mobile (KMM) Plugin"),"\nfor Android Studio, version 0.2.6 or higher."),(0,o.kt)("li",{parentName:"ul"},'A KMM App created using the "KMM Application" template in Android\nStudio. Follow the instructions in the\n',(0,o.kt)("a",{parentName:"li",href:"https://kotlinlang.org/docs/mobile/create-first-app.html"},"KMM documentation"),"."),(0,o.kt)("li",{parentName:"ul"},"An Android Virtual Device (AVD) using a compatible architecture\n(x86_64 or arm64).")),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("b",null,"x86 Devices are not Compatible with the Kotlin SDK")),(0,o.kt)("div",null,"The Kotlin SDK does not support x86 devices. Since x86 devices are the default option in Android Studio, you must create an x86_64 or arm64 device in AVD Manager to run applications that use the SDK. You can find images for compatible devices in AVD Manager. Follow these steps to create and use a compatible device:",(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Open AVD Manager in Android Studio by selecting ",(0,o.kt)("inlineCode",{parentName:"p"},"Tools")," > ",(0,o.kt)("inlineCode",{parentName:"p"},"AVD Manager"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Click the ",(0,o.kt)("inlineCode",{parentName:"p"},"Create Virtual Device")," button.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Select a phone, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"Nexus 5"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Click the ",(0,o.kt)("inlineCode",{parentName:"p"},"Next")," button.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Navigate to the ",(0,o.kt)("inlineCode",{parentName:"p"},"x86 Images")," tab.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Click the ",(0,o.kt)("inlineCode",{parentName:"p"},"Download")," link next to an x86_64 device image, such as\n",(0,o.kt)("inlineCode",{parentName:"p"},"S / x86_64 / Android API S (Google Play)"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Click the ",(0,o.kt)("inlineCode",{parentName:"p"},"Finish")," button to close the dialogue when the image\nfinishes downloading.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Click the ",(0,o.kt)("inlineCode",{parentName:"p"},"Next")," button.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Name your device and click the ",(0,o.kt)("inlineCode",{parentName:"p"},"Finish")," button to add it to your list\nof virtual devices.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"At the top of your Android Studio window, select your compatible\ndevice in the AVD dropdown."))),(0,o.kt)("p",null,"You can track x86 support in\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/realm/realm-kotlin/issues/109"},"this GitHub issue"),"."))))}s.isMDXComponent=!0},1908:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return u},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return m},default:function(){return g}});var i=t(7462),a=t(3366),o=(t(7294),t(3905)),l=t(9877),r=t(8215),s=t(5078),d=["components"],u={title:"Install (Kotlin Multiplatform)"},p=void 0,c={unversionedId:"sdk/kotlin/install/kotlin-multiplatform",id:"sdk/kotlin/install/kotlin-multiplatform",title:"Install (Kotlin Multiplatform)",description:"Prerequisites",source:"@site/docs/sdk/kotlin/install/kotlin-multiplatform.mdx",sourceDirName:"sdk/kotlin/install",slug:"/sdk/kotlin/install/kotlin-multiplatform",permalink:"/docusaurus-realm/sdk/kotlin/install/kotlin-multiplatform",tags:[],version:"current",frontMatter:{title:"Install (Kotlin Multiplatform)"},sidebar:"kotlin",previous:{title:"Install (Android)",permalink:"/docusaurus-realm/sdk/kotlin/install/android"},next:{title:"Quick Start",permalink:"/docusaurus-realm/sdk/kotlin/quick-start"}},m=[{value:"Prerequisites",id:"prerequisites",children:[],level:2},{value:"Installation",id:"installation",children:[],level:2}],k={toc:m};function g(e){var n=e.components,t=(0,a.Z)(e,d);return(0,o.kt)("wrapper",(0,i.Z)({},k,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)(s.ZP,{mdxType:"PrerequisitesKotlin"}),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)(l.Z,{groupId:"sdk-distros",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"realm-database",label:"Realm Database",mdxType:"TabItem"},(0,o.kt)("p",null,"To add local-only Realm Database to your application, make\nthe following changes to your shared module Gradle build\nfile, typically found at ",(0,o.kt)("inlineCode",{parentName:"p"},"<project>/shared/build.gradle.kts"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Add ",(0,o.kt)("inlineCode",{parentName:"li"},"io.realm.kotlin:library-base")," to the dependencies\nblock of your common module."),(0,o.kt)("li",{parentName:"ul"},"Add ",(0,o.kt)("inlineCode",{parentName:"li"},"io.realm.kotlin")," to your list of plugins."),(0,o.kt)("li",{parentName:"ul"},"To use coroutines with the SDK, add\n",(0,o.kt)("inlineCode",{parentName:"li"},"org.jetbrains.kotlinx:kotlinx-coroutines-core"),"\nto the dependencies block of your common module.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'plugins {\n    kotlin("multiplatform")\n    kotlin("native.cocoapods")\n    id("com.android.library")\n    // highlight-next-line\n    id("io.realm.kotlin")\n}\n\nversion = "1.0"\n\nkotlin {\n    android()\n    iosX64()\n    iosArm64()\n\n    cocoapods {\n        summary = "Some description for the Shared Module"\n        homepage = "Link to the Shared Module homepage"\n        ios.deploymentTarget = "14.1"\n        podfile = project.file("../iosRealmKMMApp/Podfile")\n        framework {\n            baseName = "shared"\n        }\n    }\n    \n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                // highlight-next-line\n                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2-native-mt")\n                // highlight-next-line\n                implementation("io.realm.kotlin:library-base:{version}")\n            }\n        }\n        val commonTest by getting {\n            dependencies {\n                implementation(kotlin("test-common"))\n                implementation(kotlin("test-annotations-common"))\n            }\n        }\n       val androidMain by getting\n       val androidTest by getting {\n           dependencies {\n                implementation(kotlin("test-junit"))\n                implementation("junit:junit:4.13.2")\n            }\n        }\n        val iosX64Main by getting\n        val iosArm64Main by getting\n        \n        val iosMain by creating {\n            dependsOn(commonMain)\n            iosX64Main.dependsOn(this)\n            iosArm64Main.dependsOn(this)\n        }\n        val iosX64Test by getting\n        val iosArm64Test by getting\n        val iosTest by creating {\n            dependsOn(commonTest)\n            iosX64Test.dependsOn(this)\n            iosArm64Test.dependsOn(this)\n        }\n    }\n}\n\nandroid {\n    compileSdk = 30\n    sourceSets["main"].manifest.srcFile("src/androidMain/AndroidManifest.xml")\n    defaultConfig {\n        minSdk = 28\n        targetSdk = 30\n    }\n}\n')),(0,o.kt)("p",null,"Then, add ",(0,o.kt)("inlineCode",{parentName:"p"},'classpath("io.realm.kotlin:gradle-plugin:{version}")'),"\nto the ",(0,o.kt)("inlineCode",{parentName:"p"},"buildscript.dependencies")," block of your project-level\nGradle build file, typically found at ",(0,o.kt)("inlineCode",{parentName:"p"},"<project>/build.gradle.kts"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'buildscript {\n    repositories {\n        gradlePluginPortal()\n        google()\n        mavenCentral()\n    }\n    dependencies {\n        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10")\n        classpath("com.android.tools.build:gradle:7.1.1")\n        // highlight-next-line\n        classpath("io.realm.kotlin:gradle-plugin:{version}")\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        mavenCentral()\n    }\n}\n\ntasks.register("clean", Delete::class) {\n    delete(rootProject.buildDir)\n}\n'))),(0,o.kt)(r.Z,{value:"sync",label:"Sync",mdxType:"TabItem"},(0,o.kt)("p",null,"To add Realm Database and Sync to your application, make\nthe following changes to your shared module Gradle build\nfile, typically found at ",(0,o.kt)("inlineCode",{parentName:"p"},"shared/build.gradle.kts"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Add ",(0,o.kt)("inlineCode",{parentName:"li"},"io.realm.kotlin:library-sync")," to the dependencies\nblock of your common module."),(0,o.kt)("li",{parentName:"ul"},"Add ",(0,o.kt)("inlineCode",{parentName:"li"},"io.realm.kotlin")," to your list of plugins."),(0,o.kt)("li",{parentName:"ul"},"To use coroutines with the SDK, add\n",(0,o.kt)("inlineCode",{parentName:"li"},"org.jetbrains.kotlinx:kotlinx-coroutines-core"),"\nto the dependencies block of your common module.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'plugins {\n    kotlin("multiplatform")\n    kotlin("native.cocoapods")\n    id("com.android.library")\n    // highlight-next-line\n    id("io.realm.kotlin")\n}\n\nversion = "1.0"\n\nkotlin {\n    android()\n    iosX64()\n    iosArm64()\n\n    cocoapods {\n        summary = "Some description for the Shared Module"\n        homepage = "Link to the Shared Module homepage"\n        ios.deploymentTarget = "14.1"\n        podfile = project.file("../iosRealmKMMApp/Podfile")\n        framework {\n            baseName = "shared"\n        }\n    }\n    \n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                // highlight-next-line\n                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2-native-mt")\n                // highlight-next-line\n                implementation("io.realm.kotlin:library-sync:{version}")\n            }\n        }\n        val commonTest by getting {\n            dependencies {\n                implementation(kotlin("test-common"))\n                implementation(kotlin("test-annotations-common"))\n            }\n        }\n       val androidMain by getting\n       val androidTest by getting {\n           dependencies {\n                implementation(kotlin("test-junit"))\n                implementation("junit:junit:4.13.2")\n            }\n        }\n        val iosX64Main by getting\n        val iosArm64Main by getting\n        \n        val iosMain by creating {\n            dependsOn(commonMain)\n            iosX64Main.dependsOn(this)\n            iosArm64Main.dependsOn(this)\n        }\n        val iosX64Test by getting\n        val iosArm64Test by getting\n        val iosTest by creating {\n            dependsOn(commonTest)\n            iosX64Test.dependsOn(this)\n            iosArm64Test.dependsOn(this)\n        }\n    }\n}\n\nandroid {\n    compileSdk = 30\n    sourceSets["main"].manifest.srcFile("src/androidMain/AndroidManifest.xml")\n    defaultConfig {\n        minSdk = 28\n        targetSdk = 30\n    }\n}\n')),(0,o.kt)("p",null,"Then, add ",(0,o.kt)("inlineCode",{parentName:"p"},"io.realm.kotlin:gradle-plugin"),"\nto the ",(0,o.kt)("inlineCode",{parentName:"p"},"buildscript.dependencies")," block of your project-level\nGradle build file, typically found at ",(0,o.kt)("inlineCode",{parentName:"p"},"<project>/build.gradle.kts"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'buildscript {\n    repositories {\n        gradlePluginPortal()\n        google()\n        mavenCentral()\n    }\n    dependencies {\n        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10")\n        classpath("com.android.tools.build:gradle:7.1.1")\n        // highlight-next-line\n        classpath("io.realm.kotlin:gradle-plugin:{version}")\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        mavenCentral()\n    }\n}\n\ntasks.register("clean", Delete::class) {\n    delete(rootProject.buildDir)\n}\n')))),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Android Module Dependencies")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If you use any part of the SDK inside the Android module, add the\nSDK's compile-time dependency to your Android module ",(0,o.kt)("inlineCode",{parentName:"p"},"build.gradle.kts"),":"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n    compileOnly("io.realm.kotlin:library:{version}")\n}\n')))),(0,o.kt)("p",null,"After updating the Gradle configuration,\nresolve the dependencies by clicking ",(0,o.kt)("inlineCode",{parentName:"p"},"File")," >\n",(0,o.kt)("inlineCode",{parentName:"p"},"Sync Project with Gradle Files")," in the Android Studio menu bar.\nYou can now use the Kotlin SDK in your application."))}g.isMDXComponent=!0}}]);