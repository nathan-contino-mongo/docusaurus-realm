"use strict";(self.webpackChunkflutter_sdk_docs=self.webpackChunkflutter_sdk_docs||[]).push([[836],{7729:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return u}});var n=a(7462),i=a(3366),l=(a(7294),a(3905)),r=["components"],o={title:"Supported Types"},s=void 0,p={unversionedId:"sdk/kotlin/realm-database/schemas/supported-types",id:"sdk/kotlin/realm-database/schemas/supported-types",title:"Supported Types",description:"Realm Database supports the following field data types:",source:"@site/docs/sdk/kotlin/realm-database/schemas/supported-types.mdx",sourceDirName:"sdk/kotlin/realm-database/schemas",slug:"/sdk/kotlin/realm-database/schemas/supported-types",permalink:"/docusaurus-realm/sdk/kotlin/realm-database/schemas/supported-types",tags:[],version:"current",frontMatter:{title:"Supported Types"},sidebar:"kotlin",previous:{title:"Frozen Architecture",permalink:"/docusaurus-realm/sdk/kotlin/realm-database/frozen-architecture"},next:{title:"Sync Overview",permalink:"/docusaurus-realm/sdk/kotlin/sync/overview"}},d=[{value:"Updating Strings and Byte Arrays",id:"updating-strings-and-byte-arrays",children:[],level:2}],m={toc:d};function u(e){var t=e.components,a=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Realm Database supports the following field data types:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Boolean")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"boolean")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Integer")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"int")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Short")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"short")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Long")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"long")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Double")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"double")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Float")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"float")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"String")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Char")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Date")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Decimal128")," from ",(0,l.kt)("inlineCode",{parentName:"li"},"org.bson.types")),(0,l.kt)("li",{parentName:"ul"},"Any ",(0,l.kt)("inlineCode",{parentName:"li"},"RealmObject")," subclass"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"RealmList"))),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Byte"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Short"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Integer"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"Long")," types and their\nlowercase primitive alternatives are all stored as ",(0,l.kt)("inlineCode",{parentName:"p"},"Long")," values\nwithin Realm Database. Similarly, Realm Database stores objects\nof the ",(0,l.kt)("inlineCode",{parentName:"p"},"Float")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"float")," types as type ",(0,l.kt)("inlineCode",{parentName:"p"},"Double"),"."),(0,l.kt)("p",null,"Realm Database does not support fields with modifiers ",(0,l.kt)("inlineCode",{parentName:"p"},"final")," and\n",(0,l.kt)("inlineCode",{parentName:"p"},"volatile"),", though you can use fields with those modifiers if you\n",(0,l.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/realm-sdks/kotlin/latest/library-base/-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm.annotations/-ignore/index.html"},(0,l.kt)("inlineCode",{parentName:"a"},"ignore")),"\nthem. If you choose to provide custom constructors, you must declare a\npublic constructor with no arguments."),(0,l.kt)("h2",{id:"updating-strings-and-byte-arrays"},"Updating Strings and Byte Arrays"),(0,l.kt)("p",null,"Since Realm Database operates on fields as a whole, it's not possible\nto directly update individual elements of strings or byte arrays. Instead,\nyou'll need to read the whole field, make your modification to individual\nelements, and then write the entire field back again in a transaction block."))}u.isMDXComponent=!0}}]);